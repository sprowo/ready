package com.prowo.ydnamic.session;import com.prowo.ydnamic.cache.CacheManager;import com.prowo.ydnamic.context.ComxContext;import com.prowo.ydnamic.mapper.IDGenerator;import org.apache.commons.lang3.StringUtils;import org.apache.log4j.Logger;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class Session {    private static Logger logger = Logger.getLogger(Session.class);    private HttpServletRequest request;    private HttpServletResponse response;    private String cookieID;    private CacheManager cacheManager = ComxContext.getContext().getCacheManager();    protected String getCookieName() {        return "DYNAMIC_COOKIE";    }    protected String getPath() {        String contextPath = request.getContextPath();        return ComxContext.getContext().get("session.cookie.path") == null ? contextPath : ComxContext.getContext()                .get("session.cookie.path");    }    protected long getTimeout() {        return ComxContext.getContext().get("session.cookie.timeout") == null ? 900000 : Long.parseLong(ComxContext                .getContext().get("session.cookie.timeout"));    }    public HttpServletRequest getRequest() {        return request;    }    public HttpServletResponse getResponse() {        return response;    }    /**     * 取得当前cookie，如果没有就返回空     *     * @param request     */    public Session(HttpServletRequest request) {        this.request = request;        Cookie[] cookies = request.getCookies();        Cookie target = null;        for (Cookie cookie : cookies) {            if (getCookieName().equals(cookie.getName())) {                target = cookie;                break;            }        }        if (target != null) {            cookieID = target.getValue();        }        if (logger.isDebugEnabled()) {            logger.debug("当前Session的" + getCookieName() + "[" + cookieID + "]");        }    }    /**     * 取得当前session，如果没有就创建session     *     * @param request     * @param response     */    public Session(HttpServletRequest request, HttpServletResponse response) {        this.request = request;        this.response = response;        Cookie[] cookies = request.getCookies();        Cookie target = null;        if (cookies != null) {            for (Cookie cookie : cookies) {                if (getCookieName().equals(cookie.getName())) {                    target = cookie;                    break;                }            }        }        if (target == null || StringUtils.isEmpty(target.getValue())) {            cookieID = IDGenerator.getUUID();            Cookie cookie = new Cookie(getCookieName(), cookieID);            cookie.setPath(getPath());            response.addCookie(cookie);        } else {            cookieID = target.getValue();        }        if (logger.isDebugEnabled()) {            logger.debug("当前Session的" + getCookieName() + "[" + cookieID + "]");        }    }    /**     * 创建session     *     * @param request     * @param response     */    public Session(HttpServletResponse response, HttpServletRequest request) {        this.request = request;        this.response = response;        cookieID = IDGenerator.getUUID();        Cookie cookie = new Cookie(getCookieName(), cookieID);        cookie.setPath(getPath());        response.addCookie(cookie);    }    /**     * 模拟HttpSession.getAttribute(String)     *     * @param sessionName     * @return     */    public synchronized String getAttribute(String sessionName) {        String value = cacheManager.getString(cookieID + ":" + sessionName);        if (logger.isDebugEnabled()) {            logger.debug("获取当前Session, " + getCookieName() + "[" + cookieID + "]\t value:[" + value + "]");        }        return value;    }    /**     * 模拟HttpSession.setAttribute(String, String)     *     * @param sessionName     * @param value     */    public synchronized void setAttribute(String sessionName, String value) {        cacheManager.setString(cookieID + ":" + sessionName, value, getTimeout());        if (logger.isDebugEnabled()) {            logger.debug("将当前信息放入Session, " + getCookieName() + "[" + cookieID + "]\t value:[" + value + "]");        }    }    /**     * 模拟HttpSession.removeAttribute(String)     *     * @param sessionName     */    public synchronized void removeAttribute(String sessionName) {        cacheManager.removeCache(cookieID + ":" + sessionName);        if (logger.isDebugEnabled()) {            logger.debug("移除Session中的当前信息, " + getCookieName() + "[" + cookieID + "]");        }    }    public synchronized void invalidate() {        cacheManager.clearCache(cookieID + ":" + "*");        Cookie[] cookies = request.getCookies();        if (cookies != null) {            for (Cookie cookie : cookies) {                cookie.setMaxAge(0);            }        }    }}